import type { VideoState, VideoQuality, PlaybackRate, VideoConfig, VideoMetadata, VideoStats, VideoEventType, VideoEventData, VideoEventListener, IVideoPlayer } from './types';
export declare class HTML5VideoAPI<TConfig extends VideoConfig = VideoConfig> implements IVideoPlayer<TConfig> {
    private _element;
    private _config;
    private _state;
    private _metadata;
    private _stats;
    private _isDestroyed;
    private _currentQuality;
    private _eventEmitter;
    private _performanceObserver?;
    private _loadStartTime;
    private _playStartTime;
    private _pauseStartTime;
    constructor(element: HTMLVideoElement, config: TConfig);
    get element(): HTMLVideoElement;
    get config(): TConfig;
    get state(): VideoState;
    get metadata(): VideoMetadata | null;
    get stats(): VideoStats;
    private initializeStats;
    private setupVideoElement;
    private bindVideoEvents;
    private handleVideoEvent;
    private updateState;
    private updateMetadata;
    private updateStats;
    private createEventData;
    private getErrorType;
    private setupPerformanceMonitoring;
    private handlePerformanceEntry;
    private applyConfig;
    private loadSources;
    on<T extends VideoEventType>(event: T, listener: VideoEventListener<T>): void;
    off<T extends VideoEventType>(event: T, listener: VideoEventListener<T>): void;
    emit<T extends VideoEventType>(event: T, data: VideoEventData<T>): void;
    play(): Promise<void>;
    pause(): void;
    stop(): void;
    seek(time: number): void;
    setVolume(volume: number): void;
    mute(): void;
    unmute(): void;
    toggleMute(): void;
    setPlaybackRate(rate: PlaybackRate): void;
    setQuality(quality: VideoQuality): void;
    getAvailableQualities(): VideoQuality[];
    enterFullscreen(): Promise<void>;
    exitFullscreen(): Promise<void>;
    toggleFullscreen(): Promise<void>;
    enterPiP(): Promise<void>;
    exitPiP(): Promise<void>;
    togglePiP(): Promise<void>;
    destroy(): void;
}
export declare const createHTML5VideoAPI: <T extends VideoConfig>(element: HTMLVideoElement, config: T) => HTML5VideoAPI<T>;
export declare const isHTML5VideoAPI: (player: any) => player is HTML5VideoAPI;
//# sourceMappingURL=VideoAPI.d.ts.map